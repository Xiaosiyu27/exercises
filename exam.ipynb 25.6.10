{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b0b6c936",
   "metadata": {},
   "source": [
    "# Programming in Python\n",
    "## Exam: June 10, 2025\n",
    "\n",
    "\n",
    "You can solve the exercises below by using standard Python 3.12 libraries, NumPy, Matplotlib, Pandas, PyMC.\n",
    "You can browse the documentation: [Python](https://docs.python.org/3.12/), [NumPy](https://numpy.org/doc/1.26/index.html), [Matplotlib](https://matplotlib.org/3.10.0/users/index.html), [Pandas](https://pandas.pydata.org/pandas-docs/version/2.2/index.html), [PyMC](https://www.pymc.io/projects/docs/en/stable/api.html).\n",
    "You can also look at the [slides](https://homes.di.unimi.it/monga/lucidi2425/pyqb00.pdf) or your code on [GitHub](https://github.com).\n",
    "\n",
    "\n",
    "**The exam is \"open book\", but it is strictly forbidden to communicate with others or \"ask questions\" online (i.e., stackoverflow is ok if the answer is already there, but you cannot ask a new question or use ChatGPT and similar products). Suspicious canned answers or plagiarism among student solutions will cause the invalidation of the exam for all the people involved.**\n",
    "\n",
    "To test examples in docstrings use\n",
    "\n",
    "```python\n",
    "import doctest\n",
    "doctest.testmod()\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97646033",
   "metadata": {},
   "source": [
    "**SOLVE EACH EXERCISE IN ONE OR MORE NOTEBOOK CELLS AFTER THE QUESTION.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "f6d02adf",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pymc'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[53], line 4\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpymc\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpm\u001b[39;00m   \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01marviz\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01maz\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pymc'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd  # type: ignore\n",
    "import matplotlib.pyplot as plt # type: ignore\n",
    "import pymc as pm   # type: ignore\n",
    "import arviz as az  # type: ignore"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd4b31e6",
   "metadata": {},
   "source": [
    "### Exercise 1 (max 3 points)\n",
    "\n",
    "The file [rhinos.csv](./rhinos.csv) (Duth√©, Vanessa (2023), Reductions in home-range size and social interactions among dehorned black rhinoceroses (Diceros bicornis), Dryad, Dataset, https://doi.org/10.5061/dryad.gf1vhhmt5) contains:\n",
    "\n",
    "- Date: date of rhino sighting\n",
    "- RhinosAtSighting: id of individual rhino\n",
    "- Sex: sex of individual rhino\n",
    "- Horn: indicating horned or dehorned rhino at time of sighting\n",
    "- DateBorn: date of birth of individual rhino\n",
    "- Reserve: reserve where sighting occured\n",
    "\n",
    "Read the data in a pandas DataFrame. Be sure  that the columns `Date` and `DateBorn` has dtype `pd.datetime64[ns]`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5e2ef34e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>RhinosAtSighting</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Horn</th>\n",
       "      <th>DateBorn</th>\n",
       "      <th>Reserve</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-03-31</td>\n",
       "      <td>MPGRBF-02-05</td>\n",
       "      <td>Female</td>\n",
       "      <td>Dehorned</td>\n",
       "      <td>1998-01-01</td>\n",
       "      <td>Reserve1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-03-17</td>\n",
       "      <td>MPGRBF-02-05</td>\n",
       "      <td>Female</td>\n",
       "      <td>Horned</td>\n",
       "      <td>1998-01-01</td>\n",
       "      <td>Reserve1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-02-06</td>\n",
       "      <td>MPGRBF-02-05</td>\n",
       "      <td>Female</td>\n",
       "      <td>Horned</td>\n",
       "      <td>1998-01-01</td>\n",
       "      <td>Reserve1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-06-20</td>\n",
       "      <td>MPGRBF-02-05</td>\n",
       "      <td>Female</td>\n",
       "      <td>Dehorned</td>\n",
       "      <td>1998-01-01</td>\n",
       "      <td>Reserve1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>MPGRBF-02-05</td>\n",
       "      <td>Female</td>\n",
       "      <td>Dehorned</td>\n",
       "      <td>1998-01-01</td>\n",
       "      <td>Reserve1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date RhinosAtSighting     Sex      Horn   DateBorn   Reserve\n",
       "0 2019-03-31     MPGRBF-02-05  Female  Dehorned 1998-01-01  Reserve1\n",
       "1 2015-03-17     MPGRBF-02-05  Female    Horned 1998-01-01  Reserve1\n",
       "2 2016-02-06     MPGRBF-02-05  Female    Horned 1998-01-01  Reserve1\n",
       "3 2018-06-20     MPGRBF-02-05  Female  Dehorned 1998-01-01  Reserve1\n",
       "4 2018-01-02     MPGRBF-02-05  Female  Dehorned 1998-01-01  Reserve1"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('rhinos.csv',sep=';', parse_dates=['Date','DateBorn'],dayfirst=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dfd257e",
   "metadata": {},
   "source": [
    "### Exercise 2 (max 3 points)\n",
    "\n",
    "Add a column `Age` with the age in weeks of the rhinos at the time of the sighting.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fd5366ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Age'] = (df['Date'] - df['DateBorn']).dt.days / 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3682d2d6",
   "metadata": {},
   "source": [
    "### Exercise 3 (max 7 points)\n",
    "\n",
    "Define a function `dehornings` that takes a list of sightings \"Horned\" or \"Dehorned\" and counts how many times the rhino was dehorned.\n",
    "For example, if the sightings are `[\"Horned\", \"Horned\", \"Dehorned\"]`, the rhino was dehorned once; if the sightings are `[\"Dehorned\", \"Dehorned\", \"Dehorned\"]` the rhino was dehorned once; if the sightings are `[\"Horned\", \"Horned\", \"Horned\", \"Horned\"]` the rhino was never dehorned; if the sightings are `[\"Dehorned\", \"Horned\", \"Dehorned\"]` the rhino was dehorned two times.\n",
    "\n",
    "To get the full marks, you should declare correctly the type hints and add a test within a doctest string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "169a6677",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def dehornings(sightings):\n",
    "    count = 0\n",
    "    prev = None\n",
    "    for sighting in sightings:\n",
    "        if sighting == \"Dehorned\" and prev != \"Dehorned\":\n",
    "            count += 1\n",
    "        prev = sighting\n",
    "    return count\n",
    "dehornings([\"Horned\",\"Horned\",\"Dehorned\"])       "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3dedc4e",
   "metadata": {},
   "source": [
    "### Exercise 4 (max 5 points)\n",
    "\n",
    "Apply the function defined in Exercise 3 to the data referring to the rhinos and find the rhino that was dehorned the most. Please note that you should order the list of sightings by `Date`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "7e8a955b",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "xWF22\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Lenovo\\AppData\\Local\\Temp\\ipykernel_18980\\3759400748.py:2: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  grouped = df.groupby('RhinosAtSighting').apply(\n"
     ]
    }
   ],
   "source": [
    "def find_most_dehorned_rhino(df):\n",
    "    grouped = df.groupby('RhinosAtSighting').apply(\n",
    "    lambda x:x.sort_values('Date')['Horn'].tolist()\n",
    "    )\n",
    "    dehorned_counts=grouped.apply(dehornings)\n",
    "    most_dehorned=dehorned_counts.idxmax()\n",
    "    return most_dehorned\n",
    "print(find_most_dehorned_rhino(df))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "118dcfab",
   "metadata": {},
   "source": [
    "### Exercise 5 (max 2 points)\n",
    "\n",
    "Compute for each rhino the weeks between the first and the last sighting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "26d307bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RhinosAtSighting\n",
      "Bonakala      425\n",
      "Bongumenzi    231\n",
      "Cusha         711\n",
      "Dondo         305\n",
      "Dumisane      306\n",
      "             ... \n",
      "xWF22         374\n",
      "xWF30         164\n",
      "xWF5          432\n",
      "xWF6          227\n",
      "xWF7          434\n",
      "Name: Date, Length: 368, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "weeks=(df.groupby('RhinosAtSighting')['Date']\n",
    "      .agg(lambda x:(x.max()-x.min()).days//7)\n",
    "      )\n",
    "print(weeks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd2043bb",
   "metadata": {},
   "source": [
    "### Exercise 6 (max 4 points)\n",
    "\n",
    "Plot a histogram of the number of rhinos observed in each reserve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "93c958bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rhinos_count_per_reserve=df.groupby('Reserve')['RhinosAtSighting'].nunique()\n",
    "plt.hist(rhinos_count_per_reserve.values,bins=10)\n",
    "plt.xlabel('Number of rhinos')\n",
    "plt.ylabel('Number of reserves')\n",
    "plt.title('Distribution of rhinos per reserve')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cafddfab",
   "metadata": {},
   "source": [
    "### Exercise 7 (max 4 points)\n",
    "\n",
    "Plot together the histograms of the number of male and female rhinos observed in each reserve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3ec24974",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjMAAAIACAYAAAB3vO3BAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAUIRJREFUeJzt3Xl4TPf+B/D3ZJJMdiEhC9kQOyW0trZ2EXt1cW/sbS21L7eWq4jSIO1V1FJr6GJpS93aQqzX2qJSqkoRSxFrJCEikvn8/uiT+ZkmmImMM+d4v55nnsd8z5mZz2e+IW/nnPmOTkQERERERCrloHQBRERERE+DYYaIiIhUjWGGiIiIVI1hhoiIiFSNYYaIiIhUjWGGiIiIVI1hhoiIiFSNYYaIiIhUjWGGiIiIVI1hhqym0+ksuu3cuRM7d+6ETqfDd999Z9Oazp07Z3rdlStX5tseExMDnU6HGzdu2LSOR9HpdBg4cKAir22t7Oxs9OvXDwEBAdDr9ahZs6bSJZnmd+nSpUqXYrW8vwM7d+5UupQi8yznY+nSpdDpdDh06NAT923cuDEaN25s85rI/jgqXQCpz/79+83uT5o0CTt27MD27dvNxqtUqYKff/75WZYGABg7dixef/11ODk5PfPX1oJ58+Zh/vz5+Oyzz1C7dm14eHgoXRKRRebOnat0CaQQhhmyWr169czulyxZEg4ODvnGlRAVFYVNmzbh888/x6BBg5Qu55nKzc1FTk4ODAbDUz3Pr7/+CldXV9UcSdKyzMxMuLm5KV2GIkQEWVlZVj2mSpUqNqqG7B1PM9Ez8eDBA4wdOxaBgYHw8vJC8+bNcfLkyXz7bd26Fc2aNYOXlxfc3NzQsGFDbNu2zeLXadq0KSIjIzFp0iRkZGQ8dt/Q0FD07Nkz3/jfD1XnnSZYvnw5Ro0ahYCAAHh4eKBdu3a4evUqMjIy0KdPH/j6+sLX1xe9evXCnTt3CnzN+fPno0KFCjAYDKhSpUqBp8RSUlLQt29flClTBs7OzggLC8PEiRORk5Nj2ifvMH9cXBwmT56MsLAwGAwG7Nix45H9ZmVlYcyYMQgLC4OzszNKly6NAQMG4Pbt26Z9dDodFi1ahHv37plO2z3uVELjxo1RrVo17N+/Hw0aNICrqytCQ0MRHx8PANiwYQMiIiLg5uaG6tWrIyEhwezxp0+fRq9evRAeHg43NzeULl0a7dq1w7Fjxx75mg/7448/EB0djVKlSsFgMKBy5cqYM2eORY+dM2cOXn31VZQqVQru7u6oXr064uLi8ODBgwJ7PHjwIF555RW4ubmhbNmymDp1KoxGo9m+v//+O1q1agU3Nzf4+vqiX79+T/w5zJN3KvTnn3/GG2+8geLFi6NcuXIA/vrFPnfuXNSsWROurq4oXrw43njjDZw9e7bAWtU4H3mnYj///HNUrlwZBoMBy5YtM23PyMjAe++9B19fX/j4+KBTp064fPlyvv4f/rub9/fkk08+wfTp0xEWFgYPDw/Ur18fBw4cyFfDDz/8gPr168PNzQ2enp5o0aJFviPR169fR58+fRAUFASDwYCSJUuiYcOG2Lp1q0V9ko0I0VPq0aOHuLu7F7htx44dAkBCQ0OlS5cusmHDBlmxYoUEBwdLeHi45OTkmPb98ssvRafTSceOHWXNmjWybt06adu2rej1etm6detja0hOThYA8vHHH0tSUpLodDoZN26cafuECRMEgFy/ft00FhISIj169Mj3XI0aNZJGjRrl6yEkJER69uwpCQkJ8vnnn4uHh4c0adJEWrRoIf/6179ky5YtMm3aNNHr9TJo0CCz5wQgQUFBUqVKFVmxYoX88MMP0qpVKwEg3377rWm/K1euSFBQkISEhMj8+fNl69atMmnSJDEYDNKzZ898/ZYuXVqaNGki3333nWzZskWSk5MLfH+MRqNERkaKo6OjjBs3TrZs2SKffPKJuLu7S61atSQrK0tERPbv3y+tW7cWV1dX2b9/v+zfv1+uXbv2yPe9UaNG4uPjIxUrVpTFixfL5s2bpW3btgJAJk6cKNWrV5cVK1bIxo0bpV69emIwGOTSpUumx+/atUtGjBgh3333nezatUu+//576dixo7i6usrvv/+er9/4+HjT2PHjx6VYsWJSvXp1+eKLL2TLli0yYsQIcXBwkJiYmEfWnGfYsGEyb948SUhIkO3bt8unn34qvr6+0qtXrwJ7DA8Pl88//1wSExOlf//+AkCWLVtm2i8lJUVKlSolpUuXlvj4eNm4caN06dJFgoODBYDs2LHjsfXk/YyGhITIqFGjJDExUdauXSsiIr179xYnJycZMWKEJCQkyPLly6VSpUri5+cnKSkpmpiPvJ/nGjVqyPLly2X79u3y66+/Snx8vACQ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IiKiJynUOjOvvfaaLWohIiIisprVYSY+Pt4WdRAREREVitXXzBARERHZE4uOzERERGDbtm0oXrw4atWq9di1ZX7++eciK46IiIjoSSwKMx06dIDBYAAAdOzY0Zb1EBEREVnFojAzYcKEAv9MREREpLRCf9FkdnZ2gd/NFBwc/NRFEREREVnK6jBz6tQpvPPOO9i3b5/ZuIhAp9MhNze3yIojIiIiehKrw0yvXr3g6OiI9evXIyAggF80SURERIqyOswkJSXh8OHDqFSpki3qISIiIrKK1evMVKlSBTdu3LBFLURERERWsyjMpKenm27Tpk3DyJEjsXPnTty8edNsW3p6uq3rJSIiIjJj0Wkmb29vs2tjRATNmjUz24cXABMREZESLAozO3bssHUdRERERIViUZhp1KgRAODBgwdo2bIl5s+fjwoVKti0MCIiIiJLWHUBsJOTE3799Vd+HJuIiIjshtWfZurevTsWL15si1qIiIiIrGb1OjPZ2dlYtGgREhMTUadOHbi7u5ttnz59epEVR0RERPQkVoeZX3/9FREREQD++mqDh/H0ExERET1rVocZfrKJiIiI7InV18wQERER2ROGGSIiIlI1hhkiIiJSNYYZIiIiUjWLwkxERARSU1MBAB9++CEyMzNtWhQRERGRpSwKMydOnMDdu3cBABMnTsSdO3dsWhQRERGRpSz6aHbNmjXRq1cvvPzyyxARfPLJJ/Dw8Chw3/HjxxdpgURERESPY1GYWbp0KSZMmID169dDp9Nh06ZNcHTM/1CdTscwQ0RERM+URWGmYsWKWLlyJQDAwcEB27ZtQ6lSpWxaGBEREZElrF4B2Gg02qIOIk0LHb3B6secm9rGBpUQEWmP1WEGAM6cOYMZM2bgxIkT0Ol0qFy5MoYMGYJy5coVdX1EREREj2X1OjObN29GlSpV8NNPP6FGjRqoVq0afvzxR1StWhWJiYm2qJGIiIjokaw+MjN69GgMGzYMU6dOzTc+atQotGjRosiKIyIiInoSq4/MnDhxAu+8806+8bfffhu//fZbkRRFREREZCmrw0zJkiWRlJSUbzwpKYmfcCIiIqJnzurTTL1790afPn1w9uxZNGjQADqdDnv27MG0adMwYsQIW9RIRERE9EhWh5lx48bB09MT//nPfzBmzBgAQGBgIGJiYjB48OAiL5CIiIjocawO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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "male_rhinos=df[df['Sex']=='Male'].groupby('Reserve')['RhinosAtSighting'].nunique()\n",
    "famale_rhinos=df[df['Sex']=='Female'].groupby('Reserve')['RhinosAtSighting'].nunique()\n",
    "counts_rhinos=pd.DataFrame({'Male':male_rhinos,'Female':famale_rhinos}).fillna(0)\n",
    "counts_rhinos.plot(kind='bar')\n",
    "plt.xlabel('Reserve')\n",
    "plt.ylabel('Number of rhinos')\n",
    "plt.title('The Number of male and remale rhinos')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bec98ffd",
   "metadata": {},
   "source": [
    "### Exercise 8 (max 5 points)\n",
    "\n",
    "Consider this statistical model:\n",
    "\n",
    "- a parameter $\\alpha$ is normally distributed with mean 0 and standard deviation 2.\n",
    "- a parameter $\\beta$ is normally distributed with mean 0 and standard deviation 2.\n",
    "- $\\sigma$ is exponentially distributed with $\\lambda = 1$\n",
    "- the observed mean number of dehorned sightings for each `Reserve` is normally distributed with a standard deviation of $\\sigma$ and a mean given by $\\alpha + \\beta\\cdot N$, where $N$ is number of (unique) rhinos in the reserve.\n",
    "\n",
    "Code this model with pymc, sample the model, and plot the summary of the resulting estimation by using `az.plot_posterior`.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75696478",
   "metadata": {},
   "outputs": [],
   "source": [
    "with pm.Model() as model:\n",
    "    alpha=pm.Normal('alpha',mu=0,sigma=2)\n",
    "    bata=pm.Normal('bata',mu=0,sigma=2)\n",
    "    sigma=pm.exponential('sigma',lam=1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
