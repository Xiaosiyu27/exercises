计算第一次遇见和最后一次遇见的相隔天数

weeks=(df.groupby('RhinosAtSighting')['Date']
      .agg(lambda x:(x.max()-x.min()).days//7)
      )
print(weeks)



# 练习5: 标准化出现次数
# =============================================================================
# 计算平均值和标准差
mean_occ = df['occurrences'].mean()
std_occ = df['occurrences'].std()

# 标准化处理: (值 - 均值) / 标准差
df['std_num'] = (df['occurrences'] - mean_occ) / std_occ

# =============================================================================
# Exercise 5: Extract even/odd digits from float
# =============================================================================
def evodd_digits(number: float, even_flag: bool) -> int:
    """
    Extract even or odd positioned digits from a float number
    
    Args:
        number: Input float number
        even_flag: True for even positions, False for odd positions
        
    Returns:
        Integer formed by selected digits
        
    Examples:
        >>> evodd_digits(1.2345, True)  # Even positions: 2nd and 4th digits (2 and 4)
        24
        >>> evodd_digits(123.456, False)  # Odd positions: 1st, 3rd, 5th (1, 3, 5)
        135
        >>> evodd_digits(0.123, True)  # Even position: 2nd digit (2)
        2
    """
    # Convert to string and remove non-digit characters
    num_str = re.sub(r'[^0-9]', '', str(number))
    
    # Remove leading zeros if any
    num_str = num_str.lstrip('0') or '0'
    
    # Select digits based on position
    selected_digits = []
    for idx, digit in enumerate(num_str):
        # Position index starts at 1 (first digit is odd position)
        if even_flag and (idx + 1) % 2 == 0:  # Even position
            selected_digits.append(digit)
        elif not even_flag and (idx + 1) % 2 == 1:  # Odd position
            selected_digits.append(digit)
    
    # Return integer or 0 if no digits selected
    return int(''.join(selected_digits)) if selected_digits else 0

# Test function with doctest
if __name__ == "__main__":
    doctest.testmod()

# =============================================================================
# Exercise 5: Print sampling place counts
# =============================================================================
# 统计每个采样地点的样本数量
place_counts = df['sampling_place'].value_counts()

# 打印唯一采样地点及其样本数量
print("Sampling Places and Sample Counts:")
for place, count in place_counts.items():
    print(f"{place}: {count} samples")

# =============================================================================
# Exercise 5: Find the longest axis
# =============================================================================
# 在scan.length, scan.width和x中找出最长的轴
df['longest_axis'] = df[['scan.length', 'scan.width', 'x']].max(axis=1)

# =============================================================================
# Exercise 5: Add max_compound column
# =============================================================================
# 获取所有化合物列（前4列是元数据）
compound_cols = df.columns[4:-1]  # 排除最后添加的Location列

# 计算每行化合物的最大值
df['max_compound'] = df[compound_cols].max(axis=1)

# =============================================================================
# ### Exercise 5: 添加平均ECG间隔列
print("\nExercise 5: 添加mean_ecg_delta列...")
def calc_mean_delta(row: pd.Series) -> float:
    """计算单行记录的平均ECG间隔"""
    # 处理缺失值
    if pd.isna(row['ecg_pulses']):
        return np.nan
    
    # 解析ECG脉冲时间点
    pulses = list(map(float, row['ecg_pulses'].split(',')))
    # 计算所有时间间隔
    intervals = deltas(pulses, row['duration'])
    # 返回平均间隔
    return np.mean(intervals)

# 应用函数到每行数据
dogs_df['mean_ecg_delta'] = dogs_df.apply(calc_mean_delta, axis=1)
print("平均ECG间隔列添加完成，前5行：")
print(dogs_df[['ecg_pulses', 'mean_ecg_delta']].head())

# Exercise 5: 统计采样地点信息
# 统计每个采样地点的样本数量
place_counts = df['sampling_place'].value_counts()
print("\nSampling places and counts:")
print(place_counts)
print("Exercise 5 completed: Sampling places counted")

# Exercise 5: Calculate time span between first and last sighting per rhino (in weeks)
# 计算每只犀牛首次和最后一次观察的时间跨度（周）
time_span = rhinos_df.groupby('RhinosAtSighting').apply(
    lambda group: (group['Date'].max() - group['Date'].min()).days // 7
)

# Exercise 5: Scatter plot of individual vs parent age
# 绘制子女年龄与父母年龄的散点图
plt.figure(figsize=(10, 6))
valid_parents = df[df['parent'] != -1]
plt.scatter(valid_parents['age'], df.loc[valid_parents['parent']]['age'], alpha=0.6)
plt.xlabel("Child's Age (years)")
plt.ylabel("Parent's Age (years)")
plt.title('Child vs Parent Age')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('child_vs_parent_age.png')

# Exercise 5: Load iris data
# 加载鸢尾花数据集
iris = pd.read_csv('iris.csv')
print("Exercise 5 completed: Iris dataset loaded")

# Exercise 5: Compute time span between first and last sighting per rhino (in weeks)
# 计算每只犀牛首次和最后一次观察的时间跨度（周）
time_span = rhinos_df.groupby('RhinosAtSighting').apply(
    lambda group: (group['Date'].max() - group['Date'].min()).days // 7
)
print("Exercise 5 completed: Time span between sightings calculated")

# Exercise 5: Expand both-type rows
# 复制DataFrame用于扩展
birds_expanded = birds.copy()

# 存储要添加的行
new_rows = []

# 遍历原始数据
for idx, row in birds_expanded.iterrows():
    if row['type'] in ['both (not stated)', 'scat & stomach']:
        # 计算scat样本数量（整数）
        scat_samples = int(round(row['samples'] * row['p_scat']))
        stomach_samples = row['samples'] - scat_samples
        
        # 创建scat行
        scat_row = row.copy()
        scat_row['type'] = 'scat'
        scat_row['samples'] = scat_samples
        if not pd.isna(row['total_in']):
            scat_row['total_in'] = int(round(row['total_in'] * row['p_scat']))
        
        # 创建stomach行
        stomach_row = row.copy()
        stomach_row['type'] = 'stomach'
        stomach_row['samples'] = stomach_samples
        if not pd.isna(row['total_in']):
            stomach_row['total_in'] = row['total_in'] - scat_row['total_in']
        
        # 添加新行
        new_rows.append(scat_row)
        new_rows.append(stomach_row)

# 移除原始的行
birds_expanded = birds_expanded[~birds_expanded['type'].isin(['both (not stated)', 'scat & stomach'])]
# 添加新行
birds_expanded = pd.concat([birds_expanded, pd.DataFrame(new_rows)], ignore_index=False)

print("Exercise 5 completed: Expanded DataFrame has", len(birds_expanded), "rows")





